{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "definitions": {
    "QueueConfig": {
      "type": "object",
      "properties": {
        "$ID": {
          "$ref": "../common.schema.json#/definitions/Identifiable"
        },
        "$Type": {
          "type": "string",
          "const": "Queues$QueueConfig"
        }
      },
      "required": [
        "$ID",
        "$Type"
      ]
    },
    "BasicQueueConfig": {
      "type": "object",
      "properties": {
        "$ID": {
          "$ref": "../common.schema.json#/definitions/Identifiable"
        },
        "$Type": {
          "type": "string",
          "const": "Queues$BasicQueueConfig"
        },
        "parallelismExpression": {
          "type": "string",
          "default": "1"
        },
        "clusterWide": {
          "type": "boolean",
          "default": false
        }
      },
      "required": [
        "$ID",
        "$Type"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/QueueConfig"
        }
      ]
    },
    "Queue": {
      "type": "object",
      "properties": {
        "$ID": {
          "$ref": "../common.schema.json#/definitions/Identifiable"
        },
        "$Type": {
          "type": "string",
          "const": "Queues$Queue"
        },
        "config": {
          "$ref": "#/definitions/QueueConfig"
        }
      },
      "required": [
        "$ID",
        "$Type",
        "config"
      ],
      "allOf": [
        {
          "$ref": "projects.schema.json#/definitions/Document"
        }
      ]
    },
    "QueueRetry": {
      "type": "object",
      "properties": {
        "$ID": {
          "$ref": "../common.schema.json#/definitions/Identifiable"
        },
        "$Type": {
          "type": "string",
          "const": "Queues$QueueRetry"
        }
      },
      "required": [
        "$ID",
        "$Type"
      ]
    },
    "QueueExponentialRetry": {
      "type": "object",
      "properties": {
        "$ID": {
          "$ref": "../common.schema.json#/definitions/Identifiable"
        },
        "$Type": {
          "type": "string",
          "const": "Queues$QueueExponentialRetry"
        },
        "retries": {
          "type": "integer",
          "default": 10
        },
        "initialInterval": {
          "type": "integer",
          "default": 1
        },
        "maximumInterval": {
          "type": "integer",
          "default": 86400
        },
        "intervalType": {
          "type": "string",
          "enum": [
            "Seconds",
            "Minutes",
            "Hours"
          ]
        }
      },
      "required": [
        "$ID",
        "$Type"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/QueueRetry"
        }
      ]
    },
    "QueueFixedRetry": {
      "type": "object",
      "properties": {
        "$ID": {
          "$ref": "../common.schema.json#/definitions/Identifiable"
        },
        "$Type": {
          "type": "string",
          "const": "Queues$QueueFixedRetry"
        },
        "retries": {
          "type": "integer",
          "default": 3
        },
        "interval": {
          "type": "integer",
          "default": 10
        },
        "intervalType": {
          "type": "string",
          "enum": [
            "Seconds",
            "Minutes",
            "Hours"
          ]
        }
      },
      "required": [
        "$ID",
        "$Type"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/QueueRetry"
        }
      ]
    },
    "QueueSettings": {
      "type": "object",
      "properties": {
        "$ID": {
          "$ref": "../common.schema.json#/definitions/Identifiable"
        },
        "$Type": {
          "type": "string",
          "const": "Queues$QueueSettings"
        },
        "queue": {
          "type": "string",
          "description": "ByNameReferenceProperty: #/definitions/Queue"
        },
        "retry": {
          "$ref": "#/definitions/QueueRetry"
        }
      },
      "required": [
        "$ID",
        "$Type"
      ]
    }
  }
}